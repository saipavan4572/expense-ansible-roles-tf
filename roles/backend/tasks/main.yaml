- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs 20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs and mysql
  ansible.builtin.dnf:      # homogeneous - only works for Redhat family 
    name: "{{ item }}"            # heterogeneous - ansible.builtin.package 
    state: installed
  loop:
  - nodejs
  - mysql

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: run app pre-requisites
  tags:
  - deployment
  ansible.builtin.import_role:
    name: common      #name of the role created.
    tasks_from: app-pre-req     #name of the yaml file in common role - app-pre-req.yaml

# this installing dependencies is not required because we are downloading the artifact from nexus.
# - name: install npm dependencies
#   ansible.builtin.command: npm install
#   args:
#     chdir: /app       # we are informing to ansible to run the command inside /app path.

- name: copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Enable backend service
  ansible.builtin.service:
    name: backend
    enabled: yes

- name: install python mysql dependencies
  ansible.builtin.pip:
    name: 
    - PyMySQL
    - cryptography    # to use the password in the commandline we need to install cryptography as well
    executable: pip3.9    #since python version installed is 3.9.18 use --> pip3.9

- name: import data into MySQL
  community.mysql.mysql_db:
    login_host: "{{ login_host }}"
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    target: /app/schema/backend.sql
    state: import               ## if state is dump/import we must provide name=all - to dump all data.
    name: all

- name: start and enable backend service
  tags: 
  - deployment
  ansible.builtin.service:
    name: backend
    state: restarted
